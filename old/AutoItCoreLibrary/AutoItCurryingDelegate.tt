<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Autogenerated <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffffff") #>
// ANY CHANGES TO THIS DOCUMENT WILL BE LOST UPON RE-GENERATION

using System;

namespace AutoItCoreLibrary
{
    using v = AutoItVariantType;

<#
    const int COUNT = 32;

    for (int i = 0; i <= COUNT; ++i)
        for (int j = 0; j <= i; ++j)
        {
            string a_mand = string.Join(", ", Enumerable.Range(0, i - j).Select(x => $"v p{x}"));
            string a_opt = string.Join(", ", Enumerable.Range(i - j, j).Select(x => $"v? p{x} = null"));

            if ((a_mand.Length > 0) && (a_opt.Length > 0))
                a_mand += ", ";
#>
    public delegate v AutoItDelegate<#=i #>Opt<#=j #>(<#=a_mand + a_opt #>);
<#
        }
#>

    [AttributeUsage(AttributeTargets.Class)]
    public sealed class CurryableAttribute
        : Attribute
    {
        public int TotalArguments { get; }
        public int OptionalArguments { get; }
        public int RequiredArguments => TotalArguments - OptionalArguments;

        internal CurryableAttribute(int total, int opt) =>
            (TotalArguments, OptionalArguments) = (total, opt);
    }

    public abstract class AutoItCurryingDelegate
    {
        public const int MAX_ARGC = <#=COUNT #>;


        internal AutoItCurryingDelegate()
        {
        }
    }
<#
    for (int i = 0; i <= COUNT; ++i)
        for (int j = 0; j <= i; ++j)
        {
            string typename = $"AutoItCurryingDelegate{i}Opt{j}";
            string delname = $"AutoItDelegate{i}Opt{j}";
            string par(int x) => $"p{x}";
#>

    [Curryable(<#=i #>, <#=j #>)] 
    public sealed class <#=typename #>
        : AutoItCurryingDelegate
    {
        public <#=delname #> Function { get; }

        public <#=typename #>(<#=delname #> f) => Function = f;

<#
            if ((i + j) == 0)
            {
#>
        public v Call() => Function();
    }
<#
                continue;
            }
#>
        public <#=typename #> Call() => this;
<#
            string allparams = string.Join(", ", Enumerable.Range(0, i).Select(par));

            for (int k = 1; k <= i; ++k)
                if (k <= i - j)
                {
                    string parstr = string.Join(", ", Enumerable.Range(0, k).Select(x => $"v p{x}"));

                    if (k < i)
                    {
#>

        public AutoItCurryingDelegate<#=i - k #>Opt<#=j #> Call(<#=parstr #>) =>
            new AutoItCurryingDelegate<#=i - k #>Opt<#=j #>((<#=string.Join(", ", Enumerable.Range(k, i - k).Select(par)) #>) => Function(<#=allparams #>));
<#
                    }
                    else
                    {
#>

        public v Call(<#=parstr #>) => Function(<#=allparams #>);
<#
                    }
                }
                else
                {
                    string deltypestr = $"AutoItCurryingDelegate{i - k}Opt{i - k}";
                    
                    string delpars_mand = string.Join(", ", Enumerable.Range(0, i - j).Select(x => $"v p{x}"));
                    string delpars_opt = string.Join(", ", Enumerable.Range(i - j, k - i + j).Select(x => $"v? p{x} = null"));
                    
                    string delargs_opt = string.Join(", ", Enumerable.Range(k, i - k).Select(par));
                    
                    if ((delpars_mand.Length > 0) && (delpars_opt.Length > 0))
                        delpars_mand += ", ";

                    if (k < i)
                    {
#>

        public <#=deltypestr #> Call(<#=delpars_mand + delpars_opt #>) =>
            new <#=deltypestr #>((<#=delargs_opt #>) => Function(<#=allparams #>));
<#
                    }
                    else
                    {
#>

        public v Call(<#=delpars_mand + delpars_opt #>) => Function(<#=allparams #>);
<#
                    }
                }
#>

        public static implicit operator <#=delname #>(<#=typename #> del) => del.Function;

        public static implicit operator <#=typename #>(<#=delname #> del) => new <#=typename #>(del);
    }
<#
        }
#>
}
